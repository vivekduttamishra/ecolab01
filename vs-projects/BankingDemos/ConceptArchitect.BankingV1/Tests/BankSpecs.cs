using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace ConceptArchitect.BankingV1.Tests
{
    public class BankSpecs
    {
        dynamic bank;
        int totalAccounts;
        string password = "p@ss";
        double amount = 20000;
        double interestRate;
        int account1, account2;


        [Fact(Skip="NOT YET IMPLEMENTED")] 
        public void BankShouldBeInitilizedWithBankNameAndInterestRate() 
        {
            bank = new Bank("ICICI", 12);

            Assert.NotNull(bank);
            Assert.Equal("ICICI", bank.Name);
            Assert.Equal(12, bank.InterestRate);

        }

        [Fact(Skip = "NOT YET IMPLEMENTED")] 
        public void BankShouldHavePropertyToReturnTotalNumberOfAccountsOriginallySetTo0() 
        {
            bank = new Bank("ICICI", 12);
            Assert.Equal(0, bank.AccountCount);
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        public void OpenAccountShouldReturnAutoGeneratedAccountNumber()
        {
            var result = bank.OpenAccount("Vivek", "p@ss", 20000);

            Assert.Equal(totalAccounts+1, result);
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        public void OpenAccountShouldIncrmenetTotalAccountsInBank()
        {
            var result = bank.OpenAccount("Vivek", "p@ss", 20000);

            Assert.Equal(totalAccounts+1, bank.AccountCount);
        }


        [Fact(Skip = "NOT YET IMPLEMENTED")]
        public void CloseAccountShouldFailToCloseInvalidAccountNumber()
        {
            var result = bank.CloseAccount(-1, "p@ss");

            Assert.True(double.IsNaN(result));
            Assert.Equals(totalAccounts, bank.AccountCount);
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        void CloseAccountShouldFailToCloseInvalidPassword()
        {

                        
            var result = bank.CloseAccount(account1,"Wrong-"+password);





            Assert.True(double.IsNaN(result));
            //Assert total number of accounts has not changed
            Assert.Equal(totalAccounts, bank.AccountCount);
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        public void CloseAccountShouldFailToCloseAccountWithNegativeBalance()
        {

            //ARRANGE
           
            var accountNumber = bank.OpenAccount("Vivek", password,-1);

            //ACT
            var result = bank.CloseAccount(accountNumber, password);


            Assert.True(double.IsNaN(result));
            //Assert total number of accounts has not changed
            Assert.Equal(totalAccounts+1, bank.AccountCount);
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        public void CloseAccountShouldFailToCloseAlreadyClosedAccount()
        {

            //ARRANGE            
            var result = bank.CloseAccount(account1, password);

            //ACT
            result = bank.CloseAccount(account1, password);


            Assert.True(double.IsNaN(result));
            //Assert total number of accounts has not changed
            Assert.Equal(totalAccounts-1, bank.AccountCount);
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        public void CloseAccountShouldReturnBalanceInHappyPath()
        {

            //ARRANGE            
            var result = bank.CloseAccount(account1, password);

            
            Assert.Equal(amount, result);
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        public void CloseAccountShouldReduceAccountCountWhenSuccess()
        {

            //ARRANGE            
            var result = bank.CloseAccount(account1, password);


            Assert.Equal(totalAccounts-1, bank.AccountCount);
        }


        [Fact(Skip = "NOT YET IMPLEMENTED")]
        public void GetAccountShouldFailForInvalidAccountNumber()
        {
            //ACT
            var amount = bank.GetAccountBalance(-1, password);


            Assert.Equal(double.NaN, amount);
            
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        public void GetAccountShouldFailForInvalidPassword()
        {

            //ACT
            var amount = bank.GetAccountBalance(account1,"wrong password");


            Assert.Equal(double.NaN, amount);
            //Assert total number of accounts has not changed
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        public void GetAccountShouldReturnBalanceInHappyCase()
        {

           
            //ACT
            var balance = bank.GetAccountBalance(account1, password);


            Assert.Equal(amount,balance);
            //Assert total number of accounts has not changed
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        void DepositShouldFailForInvalidAccountNumber()
        {
            //ARRANGE
           
            //ACT
            var result = bank.Deposit(-1, 1);


            Assert.False(result);
            //Assert total number of accounts has not changed
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        public void DepositShouldFailForInvalidAmount()
        {

          
           
            //ACT
            var result = bank.Deposit(account1,-1);


            AssertFailedTransaction(result, account1);
            //Assert total number of accounts has not changed
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        public void DepositShouldSucceedForHappyPath()
        {

            //ARRANGE
            string password = "p@ss";
            int amount = 1000;
            var accountNumber = bank.OpenAccount("Vivek", password, amount);

            //ACT
            var result = bank.Deposit(account1, 1);


            Assert.True(result);
            Assert.Equal(amount+1, bank.GetAccountBalance(accountNumber, password));
            //Assert total number of accounts has not changed
        }

        

        [Fact(Skip = "Not Yet Implemented")]
        public void WithdrawShouldFailForInvalidAccountNumber()
        {
            Assert.False(bank.Withdraw(-1, 1, password));
        }

        [Fact(Skip = "Not Yet Implemented")]
        public void WithdrawShouldFailForInvalidPassword()
        {
            AssertFailedTransaction(bank.Withdraw(account1, 1, "wrong-password"), account1);
        }

        [Fact(Skip = "Not Yet Implemented")]
        public void WithdrawShouldFailForInvalidAmount()
        {
            AssertFailedTransaction(bank.Withdraw(account1, -1, password), account1);
        }

        [Fact(Skip = "Not Yet Implemented")]
        public void WithdrawShouldFailForInsufficientBalance()
        {
            AssertFailedTransaction(bank.Withdraw(account1, amount+1, password), account1);
        }

        [Fact(Skip = "Not Yet Implemented")]
        public void WithdrawShouldWorkForHappyCase()
        {
            bank.Withdraw(account1, 1, password)
            AssertUpdatedBalance( account1, amount - 1);
        }


        [Fact(Skip = "Not Yet Implemented")]
        public void TransferShouldFailForInvalidSourceAccountNumber()
        {
            var result = bank.Transfer(-1, 1, password, account2);

            
            AssertFailedTransaction(result, account2);
        }

        [Fact(Skip = "Not Yet Implemented")]
        public void TransferShouldFailForInvalidTargetAccountNumber()
        {
            var result = bank.Transfer(account1, 1, password, -account2);


            AssertFailedTransaction(result, account1);
        }

        [Fact(Skip = "Not Yet Implemented")]
        public void TransferShouldFailForInvalidPassword()
        {
            var result = bank.Transfer(account1, 1, "wrong-password", account2);
            AssertFailedTransaction(result, account1);
            AssertFailedTransaction(result, account2);
        }

        [Fact(Skip = "Not Yet Implemented")]
        public void TransferShouldFailForInvalidAmount()
        {
            var result = bank.Transfer(account1, -1, password, account2);
            AssertFailedTransaction(result, account1);
            AssertFailedTransaction(result, account2);
        }

        [Fact(Skip = "Not Yet Implemented")]
        public void TransferShouldFailForInsufficientBalance()
        {
            var result = bank.Transfer(account1,amount+ 1, password, account2);
            AssertFailedTransaction(result, account1);
            AssertFailedTransaction(result, account2);
        }

        [Fact(Skip = "Not Yet Implemented")]
        public void TransferShouldWorkForHappyCase()
        {
            var result = bank.Transfer(account1, 1, password, account2);
            Assert.True(result);
            AssertUpdatedBalance(account1, amount - 1);
            AssertUpdatedBalance(account2, amount + 1);
        }

        [Fact(Skip ="Not Yet Implemented")]
        public void CreditInterestShouldCreditInterestToAllAccounts()
        {
            bank.CreditInterest();

            var expectedBalance = amount + amount * interestRate / 1200;
            foreach(var account in bank.GetAccounts())
                AssertUpdatedBalance(account, expectedBalance);            
        }

        [Fact(Skip = "Not Yet Implemented")]
        public void ChangePasswordWorksForHappyPath()
        {
            var result=bank.ChangePassword(account1, password, "newPass");
            Assert.True(result);

            Assert.Equal(amount, bank.GetAccountBalance(account1, "newPass"));
        }
        [Fact(Skip = "Not Yet Implemented")]
        public void ChangePasswordFailsIfCurrentPasswordIsInvalid()
        {
            var result = bank.ChangePassword(account1, "wrong-password", "newPass");
            Assert.False(result);

            Assert.True(double.IsNaN( bank.GetAccountBalance(account1, "newPass")));
        }
        [Fact(Skip = "Not Yet Implemented")]
        public void ChangePasswordFailsIfInvalidAccount()
        {
            var result = bank.ChangePassword(-1, password, "newPass");
            Assert.False(result);

            Assert.True(double.IsNaN(bank.GetAccountBalance(account1, "newPass")));
        }


        private void AssertUpdatedBalance( int account1, double balance)
        {
            Assert.Equal(balance, bank.GetAccountBalance(account1, password));
        }

        private void AssertFailedTransaction(bool result, int account)
        {
            Assert.False(result);
            Assert.Equal(amount, bank.GetAccountBalance(account, password));
        }
    }
}
