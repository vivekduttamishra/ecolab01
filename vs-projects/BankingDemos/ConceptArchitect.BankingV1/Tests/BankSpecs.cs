using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace ConceptArchitect.BankingV1.Tests
{
    public class BankSpecs
    {
        [Fact(Skip="NOT YET IMPLEMENTED")] void BankShouldBeInitilizedWithBankNameAndInterestRate() 
        {
            //var bank = new Bank("ICICI", 12);

            //Assert.NotNull(bank);
            //Assert.Equal("ICICI", bank.Name);
            //Assert.Equal(12, bank.InterestRate);

        }

        [Fact(Skip = "NOT YET IMPLEMENTED")] void BankShouldHavePropertyToReturnTotalNumberOfAccountsOriginallySetTo0() 
        {
            //Assert.Equal(0, bank.AccountCount);
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        void OpenAccountShouldReturnAutoGeneratedAccountNumber()
        {
            //var result = bank.Open("Vivek", "p@ss", 20000);

            //Assert.Equal(1, result);
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        void OpenAccountShouldIncrmenetTotalAccountsInBank()
        {
            //var result = bank.Open("Vivek", "p@ss", 20000);

            //Assert.Equal(1, bank.AccountCount);
        }


        [Fact(Skip = "NOT YET IMPLEMENTED")]
        void CloseAccountShouldFailToCloseInvalidAccountNumber()
        {
            var result = bank.CloseAccount(-1, "p@ss");

            Assert.False(result);
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        void CloseAccountShouldFailToCloseInvalidPassword()
        {

            //ARRANGE
            string password = "p@ss";
            var accountNumber= bank.OpenAccount("Vivek", password);


            var result = bank.CloseAccount(-1, "p@ss");


            Assert.False(result);
            //Assert total number of accounts has not changed
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        void CloseAccountShouldFailToCloseAccountWithNegativeBalance()
        {

            //ARRANGE
            string password = "p@ss";
            var accountNumber = bank.OpenAccount("Vivek", password,-1);

            //ACT
            var result = bank.CloseAccount(accountNumber, password);


            Assert.False(result);
            //Assert total number of accounts has not changed
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        void CloseAccountShouldFailToCloseAlreadyClosedAccount()
        {

            //ARRANGE
            string password = "p@ss";
            var accountNumber = bank.OpenAccount("Vivek", password, -1);
            var result = bank.CloseAccount(accountNumber, password);

            //ACT
            result = bank.CloseAccount(accountNumber, password);


            Assert.False(result);
            //Assert total number of accounts has not changed
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        void GetAccountShouldFailForInvalidAccountNumber()
        {

            //ARRANGE
            string password = "p@ss";
            var accountNumber = bank.OpenAccount("Vivek", password, -1);
            

            //ACT
            var amount = bank.GetAccountBalance(-1, password);


            Assert.Equal(double.NaN, amount);
            //Assert total number of accounts has not changed
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        void GetAccountShouldFailForInvalidPassword()
        {

            //ARRANGE
            string password = "p@ss";
            var accountNumber = bank.OpenAccount("Vivek", password, -1);


            //ACT
            var amount = bank.GetAccountBalance(accountNumber,"wrong password");


            Assert.Equal(double.NaN, amount);
            //Assert total number of accounts has not changed
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        void GetAccountShouldReturnBalanceInHappyCase()
        {

            //ARRANGE
            string password = "p@ss";
            double amount = 1000;
            var accountNumber = bank.OpenAccount("Vivek", password, amount);


            //ACT
            var balance = bank.GetAccountBalance(accountNumber, password);


            Assert.Equal(amount,balance);
            //Assert total number of accounts has not changed
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        void DepositShouldFailForInvalidAccountNumber()
        {

            //ARRANGE
           
            //ACT
            result = bank.Deposit(-1, 1);


            Assert.False(result);
            //Assert total number of accounts has not changed
        }

        [Fact(Skip = "NOT YET IMPLEMENTED")]
        void DepositShouldFailForInvalidAmount()
        {

            //ARRANGE
            string password = "p@ss";
            int amount = 1000;
            var accountNumber = bank.OpenAccount("Vivek", password, amount);
           
            //ACT
            result = bank.Deposit(accountNumber,-1);


            Assert.False(result);
            Assert.Equal(amount, bank.GetAccountBalance(accountNumber, password));
            //Assert total number of accounts has not changed
        }

    }
}
